apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: {{ .Values.nginx.image }}
        imagePullPolicy: IfNotPresent
        volumeMounts:
          - mountPath: {{ .Values.nginx.path }}
            name: nginx-conf
            readOnly: true
        livenessProbe:
          httpGet:
            path: /
            port: 80
      volumes:
        - configMap:
            items:
              - key: nginx.conf # key name in configmap
                path: nginx.conf # file name in container
            name: nginx-conf
          name: nginx-conf
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-svc
spec:
  selector:
    app: nginx
  ports:
  - port: 80
    targetPort: 80

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-conf
data:
  nginx.conf: |
    user  nginx;
    worker_processes  1;

    error_log  /var/log/nginx/error.log warn;
    pid        /var/run/nginx.pid;

    events {
        worker_connections  1024;
    }

    http {
        log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';

        # Path to access.log & error.log
        access_log /var/log/nginx/access.log  main;
        error_log /var/log/nginx/error.log  warn;

        sendfile        on;
        keepalive_timeout  65;
        gzip  on;

        upstream backend {
            # must match the target service name
            server python-svc:{{ .Values.api.port }};
        }

        server {
            listen       80;
            location / {
                proxy_pass http://python-svc:{{ .Values.api.port }};
                
                proxy_set_header Host $http_host;
                proxy_redirect ~^http://[^/]*/(.*) http://$http_host/$1;
            }
        }
    }
